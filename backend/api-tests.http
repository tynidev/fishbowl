### ===========================================
### Fishbowl Game API Tests
### ===========================================
### Usage: Click "Send Request" above each request
### Make sure your backend server is running first!
### ===========================================

### Environment Variables
@baseUrl = http://localhost:3001/api
@gameCode = 8P989O
@hostPlayerId = 1bcf5cef-4f4a-4039-a140-d6f6a0d34115
@playerId = 221e320c-6a6f-4e71-a78d-25dba6d60372
@deviceId = 
@phraseId = 

### ===========================================
### 1. GAME MANAGEMENT
### ===========================================

### 1.1 Create a new game
# @name createGame
POST {{baseUrl}}/games
Content-Type: application/json

{
  "name": "Friday Night Fishbowl",
  "hostPlayerName": "Tyler",
  "teamCount": 2,
  "phrasesPerPlayer": 5,
  "timerDuration": 60
}

### 1.2 Create game with custom settings
# @name createGameCustom
POST {{baseUrl}}/games
Content-Type: application/json

{
  "name": "Saturday Game Night",
  "hostPlayerName": "Sarah",
  "teamCount": 4,
  "phrasesPerPlayer": 3,
  "timerDuration": 90
}

### 1.3 Get game information (replace gameCode with actual code from create response)
# @name getGameInfo
GET {{baseUrl}}/games/{{gameCode}}

### 1.4 Join game as a player (replace gameCode)
# @name joinGame
POST {{baseUrl}}/games/{{gameCode}}/join
Content-Type: application/json

{
  "playerName": "Alice"
}

### 1.5 Join game as another player
# @name joinGame2
POST {{baseUrl}}/games/{{gameCode}}/join
Content-Type: application/json

{
  "playerName": "Bob"
}

### 1.6 Get all players in game
# @name getPlayers
GET {{baseUrl}}/games/{{gameCode}}/players

### 1.7 Update game configuration (host only)
# @name updateConfig
PUT {{baseUrl}}/games/{{gameCode}}/config
Content-Type: application/json

{
  "teamCount": 3,
  "phrasesPerPlayer": 4,
  "timerDuration": 75
}

### ===========================================
### 2. PHRASE MANAGEMENT
### ===========================================

### 2.1 Submit phrases for a player (replace gameCode and playerId)
# @name submitPhrases
POST {{baseUrl}}/games/{{gameCode}}/phrases
Content-Type: application/json

{
  "phrases": [
    "Harry Potter",
    "Swimming with sharks",
    "Making pancakes",
    "Dancing in the rain",
    "Building a treehouse"
  ],
  "playerId": "{{playerId}}"
}

### 2.2 Submit phrases as array for another player
# @name submitPhrasesArray
POST {{baseUrl}}/games/{{gameCode}}/phrases
Content-Type: application/json

{
  "phrases": ["The Great Gatsby", "Riding a bicycle", "Cooking spaghetti"],
  "playerId": "{{hostPlayerId}}"
}

### 2.3 Submit single phrase
# @name submitSinglePhrase
POST {{baseUrl}}/games/{{gameCode}}/phrases
Content-Type: application/json

{
  "phrases": "Playing chess",
  "playerId": "{{playerId}}"
}

### 2.4 Get phrase submission status
# @name getPhraseStatus
GET {{baseUrl}}/games/{{gameCode}}/phrases/status

### 2.5 Get all phrases (host only - requires playerId in query)
# @name getAllPhrases
GET {{baseUrl}}/games/{{gameCode}}/phrases?playerId={{hostPlayerId}}

### 2.6 Update a specific phrase (replace phraseId)
# @name updatePhrase
PUT {{baseUrl}}/games/{{gameCode}}/phrases/{{phraseId}}?playerId={{playerId}}
Content-Type: application/json

{
  "text": "Updated phrase text"
}

### 2.7 Delete a specific phrase (replace phraseId)
# @name deletePhrase
DELETE {{baseUrl}}/games/{{gameCode}}/phrases/{{phraseId}}?playerId={{playerId}}

### ===========================================
### 3. DEVICE SESSION MANAGEMENT
### ===========================================

### 3.1 Generate a new device ID
# @name generateDeviceId
GET {{baseUrl}}/device-sessions/generate-id

### 3.2 Get device session information
# @name getDeviceSession
GET {{baseUrl}}/device-sessions/{{deviceId}}

### 3.3 Get device session for specific game
# @name getDeviceSessionForGame
GET {{baseUrl}}/device-sessions/{{deviceId}}?gameId={{gameCode}}

### 3.4 Check if device has active session for game
# @name checkActiveSession
GET {{baseUrl}}/device-sessions/{{deviceId}}/active/{{gameCode}}

### 3.5 Get all active sessions for a game
# @name getGameActiveSessions
GET {{baseUrl}}/device-sessions/game/{{gameCode}}/active

### 3.6 Deactivate device session
# @name deactivateSession
POST {{baseUrl}}/device-sessions/{{deviceId}}/deactivate
Content-Type: application/json

{
  "gameId": "{{gameCode}}"
}

### 3.7 Deactivate device session (all games)
# @name deactivateSessionAll
POST {{baseUrl}}/device-sessions/{{deviceId}}/deactivate
Content-Type: application/json

{}

### 3.8 Admin: Cleanup stale sessions
# @name cleanupSessions
POST {{baseUrl}}/device-sessions/admin/cleanup

### ===========================================
### 4. ERROR TESTING
### ===========================================

### 4.1 Test invalid game code
# @name testInvalidGameCode
GET {{baseUrl}}/games/INVALID

### 4.2 Test invalid player name
# @name testInvalidPlayerName
POST {{baseUrl}}/games/{{gameCode}}/join
Content-Type: application/json

{
  "playerName": ""
}

### 4.3 Test invalid phrase submission
# @name testInvalidPhrases
POST {{baseUrl}}/games/{{gameCode}}/phrases
Content-Type: application/json

{
  "phrases": ["", "This phrase is way too long and exceeds the 100 character limit that should be enforced by the API validation rules"],
  "playerId": "{{playerId}}"
}

### 4.4 Test duplicate phrase submission
# @name testDuplicatePhrases
POST {{baseUrl}}/games/{{gameCode}}/phrases
Content-Type: application/json

{
  "phrases": ["Harry Potter", "Harry Potter"],
  "playerId": "{{playerId}}"
}

### 4.5 Test unauthorized phrase access
# @name testUnauthorizedPhraseAccess
GET {{baseUrl}}/games/{{gameCode}}/phrases?playerId=invalid-player-id

### ===========================================
### 5. WORKFLOW TESTING
### ===========================================

### 5.1 Complete game setup workflow
### Step 1: Create game, copy gameCode and hostPlayerId from response
### Step 2: Join as players, copy playerIds from responses
### Step 3: Submit phrases for each player
### Step 4: Check phrase status
### Step 5: Get all phrases (as host)

### 5.2 Device session workflow
### Step 1: Generate device ID, copy to variable
### Step 2: Check active session (should be false)
### Step 3: Join game with device
### Step 4: Check active session (should be true)
### Step 5: Deactivate session

### ===========================================
### HELPER COMMANDS
### ===========================================

### Quick health check - test if server is running
# @name healthCheck
GET {{baseUrl}}/games/HEALTH

### Test server error handling
# @name testServerError
POST {{baseUrl}}/games
Content-Type: application/json

{
  "invalid": "data"
}
